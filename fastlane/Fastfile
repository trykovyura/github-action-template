# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

import "MatchFastfile"
import "KeychainFastfile"
import "DeployFastfile"


default_platform(:ios)

platform :ios do

  before_all do |lane|
    xcode_select("/Applications/Xcode_14.1.app")
    lanes_with_keychain = [:certificates, :renew_certificates]
    if lanes_with_keychain.include?(lane)
      keychain_prepare
    end
  end

  #
  # Prepare
  #
  desc "Generate project and install pods"
  lane :prepare do
    sh("echo $PWD")
    # Script R.swift
    # Script Project generation
    # Script Cocoapods dependencies download
    #xcodegen()
    #cocoapods(try_repo_update_on_error: true)
  end

  desc "Run the static analyzer on the iOS project"
  lane :analyze do
    swiftlint(
          mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect
          output_file: "swiftlint.result.json", # The path of the output file (optional)
          config_file: ".swiftlint.yml",     # The path of the configuration file (optional)
          ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
     )
  end

  #
  # Build
  #

  end
  desc "Build scheme in debug mode and upload to Crashlytics"
  lane :beta do |values|
    build_app(
              export_method: 'ad-hoc',
              export_xcargs: "-allowProvisioningUpdates",
              export_options: {
                    iCloudContainerEnvironment: 'Development',
                    compileBitcode: false,
                    provisioningProfiles: {
                                          "your.app.id.Demo" => "match AdHoc your.app.id.Demo"
                                        }
              }
            )
  end

  desc "Build, sign and upload a new beta build to Apple TestFlight"
  desc "This will **not** send an email to all testers, it will only be uploaded to the new TestFlight. "
  desc "CI build set build number with TC, on local build increment by latest at Test Flight"
  lane :release do |values|
    build_app(export_method: "app-store")
  end

  desc "Generate Mock for Protocols with sourcery"
  desc "Config file sourcery.yml"
  desc "Templates from Sourcery folder"
  lane :mock do
    Dir.chdir("..") do
        sh("sourcery --config sourcery.yml --verbose")
    end
  end
